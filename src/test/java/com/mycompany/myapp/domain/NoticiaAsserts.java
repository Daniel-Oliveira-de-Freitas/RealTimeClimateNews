package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class NoticiaAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNoticiaAllPropertiesEquals(Noticia expected, Noticia actual) {
        assertNoticiaAutoGeneratedPropertiesEquals(expected, actual);
        assertNoticiaAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNoticiaAllUpdatablePropertiesEquals(Noticia expected, Noticia actual) {
        assertNoticiaUpdatableFieldsEquals(expected, actual);
        assertNoticiaUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNoticiaAutoGeneratedPropertiesEquals(Noticia expected, Noticia actual) {
        assertThat(expected)
            .as("Verify Noticia auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNoticiaUpdatableFieldsEquals(Noticia expected, Noticia actual) {
        assertThat(expected)
            .as("Verify Noticia relevant properties")
            .satisfies(e -> assertThat(e.getTitulo()).as("check titulo").isEqualTo(actual.getTitulo()))
            .satisfies(e -> assertThat(e.getConteudo()).as("check conteudo").isEqualTo(actual.getConteudo()))
            .satisfies(e -> assertThat(e.getDataPublicacao()).as("check dataPublicacao").isEqualTo(actual.getDataPublicacao()))
            .satisfies(e -> assertThat(e.getAutor()).as("check autor").isEqualTo(actual.getAutor()))
            .satisfies(e -> assertThat(e.getCategoria()).as("check categoria").isEqualTo(actual.getCategoria()))
            .satisfies(e -> assertThat(e.getFonte()).as("check fonte").isEqualTo(actual.getFonte()))
            .satisfies(e -> assertThat(e.getUrl()).as("check url").isEqualTo(actual.getUrl()))
            .satisfies(e -> assertThat(e.getClassificacao()).as("check classificacao").isEqualTo(actual.getClassificacao()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNoticiaUpdatableRelationshipsEquals(Noticia expected, Noticia actual) {
        // empty method
    }
}
